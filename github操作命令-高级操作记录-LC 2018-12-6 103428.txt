github上fork原项目，如何将本地仓库代码更新到最新版本？ - 一米阳光eyh - 博客园
https://www.cnblogs.com/eyunhua/p/8463200.html

 方法二、通过命令行fetch拉取原仓库更新

1. 配置当前当前fork的仓库的原仓库地址

# git remote add upstream <原仓库github地址>
  git remote add upstream https://github.com/TheAlgorithms/Python.git

2. 查看当前仓库的远程仓库地址和原仓库地址

git remote -v


3. 获取原仓库的更新。使用fetch更新，fetch后会被存储在一个本地分支upstream/master上。

git fetch upstream


4. 合并到本地分支。切换到本地master分支，合并upstream/master分支。

git merge upstream/master
5. 这时候使用git log就能看到原仓库的更新了。

git log
6. 如果需要自己github上的fork的仓库需要保持同步更新，执行git push进行推送

git push origin master

----------------------------------------------------------------------------------
Git fetch和git pull的区别, 解决Git报错:error: You have not concluded your merge (MERGE_HEAD exists). - Stevin的技术博客 - CSDN博客
https://blog.csdn.net/feng2qing/article/details/56496441

Git fetch和git pull的区别:
都可以从远程获取最新版本到本地
1.Git fetch:只是从远程获取最新版本到本地,不会merge(合并)
$:git fetch origin master   //从远程的origin的master主分支上获取最新版本到origin/master分支上
$:git log -p master..origin/master //比较本地的master分支和origin/master分支的区别
$:git merge origin/master          //合并
1
2
3
2.Git pull:从远程获取最新版本并merge(合并)到本地
$:git pull origin master  //相当于进行了 git fetch 和 git merge两部操作
1
实际工作中,可能git fetch更好一些, 因为在merge前,可以根据实际情况决定是否merge
再说导致报错:error: You have not concluded your merge (MERGE_HEAD exists).的原因可能是在以前pull下来的代码自动合并失败
解决办法一:保留本地的更改,中止合并->重新合并->重新拉取
$:git merge --abort
$:git reset --merge
$:git pull
1
2
3
解决办法二:舍弃本地代码,远端版本覆盖本地版本(慎重)
$:git fetch --all
$:git reset --hard origin/master
$:git fetch

----------------------------------------------------------------------------------------------------------------------------
You have not concluded your merge. (MERGE_HEAD exists)。（转） - 水叶丽芳 - 博客园
https://www.cnblogs.com/shuiyelifang/p/6518533.html

本地有修改和提交，如何强制用远程的库更新更新。我尝试过用git pull -f，总是提示 You have not concluded your merge. (MERGE_HEAD exists)。

我需要放弃本地的修改，用远程的库的内容就可以，应该如何做？傻傻地办法就是用心的目录重新clone一个，正确的做法是什么？


正确的做法应该是：

git fetch --all
git reset --hard origin/master
git fetch 只是下载远程的库的内容，不做任何的合并git reset 把HEAD指向刚刚下载的最新的版本

---------------------------------------------------------------------------------------------------------------------------
git操作-（gitlab-github-均是git操作）

Command line instructions

Git global setup
git config --global user.name "LC"
git config --global user.email "ahlc@sina.cn"

Create a new repository

#git clone http://172.0.0.1:8888/ahviplc/hello4.git

git clone http://192.168.174.129:8888/ahviplc/hello4.git

cd hello4
touch README.md
git add README.md
git commit -m "add README"
git push -u origin master

Existing folder
cd existing_folder
git init
git remote add origin http://172.0.0.1:8888/ahviplc/hello4.git
git add .
git commit -m "Initial commit"
git push -u origin master

Existing Git repository
cd existing_repo
git remote rename origin old-origin
git remote add origin http://172.0.0.1:8888/ahviplc/hello4.git
git push -u origin --all
git push -u origin --tags
---------------------------------------------------------------------------------------------------------------------------
LC 2018年12月6日11:50:37